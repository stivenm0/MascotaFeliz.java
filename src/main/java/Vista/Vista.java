/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista;

import Clases.*;
import Controlador.*;
import java.awt.BorderLayout;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import static java.lang.System.in;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.CellStyle;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Dell
 */
public class Vista extends javax.swing.JFrame {

    CtPlan CtPlan;
    CtCliente CtCliente;
    CtMascota CtMascota;
    CtPago CtPago;
    LinkedList<Cliente> clienteComboBox;
    LinkedList<Mascota> mascotaComboBox;
    LinkedList<Plan> planComboBox;

    /**
     * Creates new form Vista
     */
    public Vista() {
        initComponents();

        this.CtPlan = new CtPlan();
        this.CtCliente = new CtCliente();
        this.CtMascota = new CtMascota();
        this.CtPago = new CtPago();
        recargarComboBoxCliente();
        recargarComboBoxMascota();
        recargarComboBoxPlan();
        refrescarGraficaMascotaporEspecie();
        llenarListaMascotas();
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mascota = new javax.swing.JTabbedPane();
        jPanelPlan = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        codigoPlan = new javax.swing.JTextField();
        nombrePlan = new javax.swing.JComboBox<>();
        precioPlan = new javax.swing.JTextField();
        btnCrearPlan = new javax.swing.JButton();
        btnConsultarPlan = new javax.swing.JButton();
        btnModificarPlan = new javax.swing.JButton();
        btnBorrarPlan = new javax.swing.JButton();
        btnLimpiarPlan = new javax.swing.JButton();
        jPanelCliente = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        IdentificacionCliente = new javax.swing.JTextField();
        NombresCliente = new javax.swing.JTextField();
        ApellidosCliente = new javax.swing.JTextField();
        DireccionCliente = new javax.swing.JTextField();
        TelefonoCliente = new javax.swing.JTextField();
        btnCrearCliente = new javax.swing.JButton();
        btnConsultarCliente = new javax.swing.JButton();
        btnModificarCliente = new javax.swing.JButton();
        btnBorrarCliente = new javax.swing.JButton();
        btnLimpiarCliente = new javax.swing.JButton();
        jPanelMascota = new javax.swing.JPanel();
        btnCrearMascota = new javax.swing.JButton();
        btnConsultarMascota = new javax.swing.JButton();
        btnModificarMascota = new javax.swing.JButton();
        btnBorrarMascota = new javax.swing.JButton();
        btnLimpiarMascota = new javax.swing.JButton();
        nombreMascota = new javax.swing.JTextField();
        annioNacMascota = new javax.swing.JTextField();
        pesoMascota = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        codigoMascota = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        cbCliente = new javax.swing.JComboBox<>();
        especieMascota = new javax.swing.JComboBox<>();
        jPanelPago = new javax.swing.JPanel();
        btnCrearPago = new javax.swing.JButton();
        btnConsultarPago = new javax.swing.JButton();
        btnModificarPago = new javax.swing.JButton();
        btnBorrarPago = new javax.swing.JButton();
        btnLimpiarPago = new javax.swing.JButton();
        numeroCuotas = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        fechaPago = new javax.swing.JTextField();
        pagoMascota = new javax.swing.JComboBox<>();
        pagoPlan = new javax.swing.JComboBox<>();
        jLabel19 = new javax.swing.JLabel();
        idPago = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        mascotasporEspecie = new javax.swing.JPanel();
        reporteMascotas = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaMascotas = new javax.swing.JList<>();
        exportarMascotas = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Código");

        jLabel2.setText("Nombre");

        jLabel3.setText("Precio");

        nombrePlan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bienestar", "Élite", "Diamante" }));

        btnCrearPlan.setText("Crear");
        btnCrearPlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearPlanActionPerformed(evt);
            }
        });

        btnConsultarPlan.setText("Consultar");
        btnConsultarPlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarPlanActionPerformed(evt);
            }
        });

        btnModificarPlan.setText("Modificar");
        btnModificarPlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarPlanActionPerformed(evt);
            }
        });

        btnBorrarPlan.setText("Borrar");
        btnBorrarPlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarPlanActionPerformed(evt);
            }
        });

        btnLimpiarPlan.setText("Limpiar");
        btnLimpiarPlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarPlanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelPlanLayout = new javax.swing.GroupLayout(jPanelPlan);
        jPanelPlan.setLayout(jPanelPlanLayout);
        jPanelPlanLayout.setHorizontalGroup(
            jPanelPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlanLayout.createSequentialGroup()
                .addGroup(jPanelPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPlanLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanelPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(43, 43, 43)
                        .addGroup(jPanelPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nombrePlan, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(codigoPlan)
                            .addComponent(precioPlan)))
                    .addGroup(jPanelPlanLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnCrearPlan)
                        .addGap(18, 18, 18)
                        .addComponent(btnConsultarPlan)
                        .addGap(18, 18, 18)
                        .addComponent(btnModificarPlan)
                        .addGap(18, 18, 18)
                        .addComponent(btnBorrarPlan)
                        .addGap(18, 18, 18)
                        .addComponent(btnLimpiarPlan)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelPlanLayout.setVerticalGroup(
            jPanelPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlanLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanelPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(codigoPlan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nombrePlan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(precioPlan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 151, Short.MAX_VALUE)
                .addGroup(jPanelPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCrearPlan)
                    .addComponent(btnConsultarPlan)
                    .addComponent(btnModificarPlan)
                    .addComponent(btnBorrarPlan)
                    .addComponent(btnLimpiarPlan))
                .addContainerGap())
        );

        mascota.addTab("Plan", jPanelPlan);

        jLabel4.setText("Identificación");

        jLabel5.setText("Nombres");

        jLabel6.setText("Apellidos");

        jLabel7.setText("Dirección");

        jLabel8.setText("Telefono");

        TelefonoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TelefonoClienteActionPerformed(evt);
            }
        });

        btnCrearCliente.setText("Crear");
        btnCrearCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearClienteActionPerformed(evt);
            }
        });

        btnConsultarCliente.setText("Consultar");
        btnConsultarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarClienteActionPerformed(evt);
            }
        });

        btnModificarCliente.setText("Modificar");
        btnModificarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarClienteActionPerformed(evt);
            }
        });

        btnBorrarCliente.setText("Borrar");
        btnBorrarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarClienteActionPerformed(evt);
            }
        });

        btnLimpiarCliente.setText("Limpiar");
        btnLimpiarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarClienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelClienteLayout = new javax.swing.GroupLayout(jPanelCliente);
        jPanelCliente.setLayout(jPanelClienteLayout);
        jPanelClienteLayout.setHorizontalGroup(
            jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelClienteLayout.createSequentialGroup()
                .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelClienteLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(31, 31, 31)
                        .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(IdentificacionCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                            .addComponent(NombresCliente)
                            .addComponent(ApellidosCliente)
                            .addComponent(DireccionCliente)
                            .addComponent(TelefonoCliente)))
                    .addGroup(jPanelClienteLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnCrearCliente)
                        .addGap(18, 18, 18)
                        .addComponent(btnConsultarCliente)
                        .addGap(18, 18, 18)
                        .addComponent(btnModificarCliente)
                        .addGap(18, 18, 18)
                        .addComponent(btnBorrarCliente)
                        .addGap(18, 18, 18)
                        .addComponent(btnLimpiarCliente)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelClienteLayout.setVerticalGroup(
            jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelClienteLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(IdentificacionCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(NombresCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(ApellidosCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(DireccionCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(TelefonoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCrearCliente)
                    .addComponent(btnConsultarCliente)
                    .addComponent(btnModificarCliente)
                    .addComponent(btnBorrarCliente)
                    .addComponent(btnLimpiarCliente))
                .addContainerGap())
        );

        mascota.addTab("Cliente", jPanelCliente);

        btnCrearMascota.setText("Crear");
        btnCrearMascota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearMascotaActionPerformed(evt);
            }
        });

        btnConsultarMascota.setText("Consultar");
        btnConsultarMascota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarMascotaActionPerformed(evt);
            }
        });

        btnModificarMascota.setText("Modificar");
        btnModificarMascota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarMascotaActionPerformed(evt);
            }
        });

        btnBorrarMascota.setText("Borrar");
        btnBorrarMascota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarMascotaActionPerformed(evt);
            }
        });

        btnLimpiarMascota.setText("Limpiar");
        btnLimpiarMascota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarMascotaActionPerformed(evt);
            }
        });

        nombreMascota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreMascotaActionPerformed(evt);
            }
        });

        jLabel9.setText("Código");

        jLabel10.setText("Nombre");

        jLabel11.setText("Año de nacimiento");

        jLabel12.setText("Peso");

        jLabel13.setText("Especie");

        jLabel14.setText("Cliente");

        cbCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbClienteActionPerformed(evt);
            }
        });

        especieMascota.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Canino", "Felino", "Reptil", "Ave", "Pez" }));

        javax.swing.GroupLayout jPanelMascotaLayout = new javax.swing.GroupLayout(jPanelMascota);
        jPanelMascota.setLayout(jPanelMascotaLayout);
        jPanelMascotaLayout.setHorizontalGroup(
            jPanelMascotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMascotaLayout.createSequentialGroup()
                .addGroup(jPanelMascotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMascotaLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanelMascotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMascotaLayout.createSequentialGroup()
                                .addGroup(jPanelMascotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel13))
                                .addGap(31, 31, 31))
                            .addGroup(jPanelMascotaLayout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGap(96, 96, 96)))
                        .addGroup(jPanelMascotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbCliente, 0, 252, Short.MAX_VALUE)
                            .addComponent(codigoMascota)
                            .addComponent(nombreMascota)
                            .addComponent(annioNacMascota)
                            .addComponent(pesoMascota)
                            .addComponent(especieMascota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelMascotaLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnCrearMascota)
                        .addGap(18, 18, 18)
                        .addComponent(btnConsultarMascota)
                        .addGap(18, 18, 18)
                        .addComponent(btnModificarMascota)
                        .addGap(18, 18, 18)
                        .addComponent(btnBorrarMascota)
                        .addGap(18, 18, 18)
                        .addComponent(btnLimpiarMascota)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelMascotaLayout.setVerticalGroup(
            jPanelMascotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMascotaLayout.createSequentialGroup()
                .addContainerGap(71, Short.MAX_VALUE)
                .addGroup(jPanelMascotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(codigoMascota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelMascotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(nombreMascota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelMascotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(annioNacMascota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelMascotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(pesoMascota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelMascotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(especieMascota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelMascotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(cbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelMascotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCrearMascota)
                    .addComponent(btnConsultarMascota)
                    .addComponent(btnModificarMascota)
                    .addComponent(btnBorrarMascota)
                    .addComponent(btnLimpiarMascota))
                .addContainerGap())
        );

        mascota.addTab("Mascota", jPanelMascota);

        btnCrearPago.setText("Crear");
        btnCrearPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearPagoActionPerformed(evt);
            }
        });

        btnConsultarPago.setText("Consultar");
        btnConsultarPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarPagoActionPerformed(evt);
            }
        });

        btnModificarPago.setText("Modificar");
        btnModificarPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarPagoActionPerformed(evt);
            }
        });

        btnBorrarPago.setText("Borrar");
        btnBorrarPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarPagoActionPerformed(evt);
            }
        });

        btnLimpiarPago.setText("Limpiar");
        btnLimpiarPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarPagoActionPerformed(evt);
            }
        });

        jLabel15.setText("Fecha de pago");

        jLabel16.setText("N° Cuotas");

        jLabel17.setText("Mascota");

        jLabel18.setText("Plan");

        pagoMascota.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        pagoMascota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pagoMascotaActionPerformed(evt);
            }
        });

        pagoPlan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel19.setText("Id Pago");

        jLabel20.setText("Diligenciar este campo solo para consultar");

        javax.swing.GroupLayout jPanelPagoLayout = new javax.swing.GroupLayout(jPanelPago);
        jPanelPago.setLayout(jPanelPagoLayout);
        jPanelPagoLayout.setHorizontalGroup(
            jPanelPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPagoLayout.createSequentialGroup()
                .addGroup(jPanelPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPagoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnCrearPago)
                        .addGap(18, 18, 18)
                        .addComponent(btnConsultarPago)
                        .addGap(18, 18, 18)
                        .addComponent(btnModificarPago)
                        .addGap(18, 18, 18)
                        .addComponent(btnBorrarPago)
                        .addGap(18, 18, 18)
                        .addComponent(btnLimpiarPago))
                    .addGroup(jPanelPagoLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanelPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(31, 31, 31)
                        .addGroup(jPanelPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pagoPlan, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pagoMascota, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanelPagoLayout.createSequentialGroup()
                                .addComponent(idPago, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(jLabel20))
                            .addComponent(fechaPago)
                            .addComponent(numeroCuotas))))
                .addGap(67, 67, 67))
        );
        jPanelPagoLayout.setVerticalGroup(
            jPanelPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelPagoLayout.createSequentialGroup()
                .addContainerGap(81, Short.MAX_VALUE)
                .addGroup(jPanelPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(idPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addGap(15, 15, 15)
                .addGroup(jPanelPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(fechaPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(numeroCuotas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(pagoMascota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanelPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addComponent(pagoPlan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCrearPago)
                    .addComponent(btnConsultarPago)
                    .addComponent(btnModificarPago)
                    .addComponent(btnBorrarPago)
                    .addComponent(btnLimpiarPago))
                .addContainerGap())
        );

        mascota.addTab("Pago", jPanelPago);

        javax.swing.GroupLayout mascotasporEspecieLayout = new javax.swing.GroupLayout(mascotasporEspecie);
        mascotasporEspecie.setLayout(mascotasporEspecieLayout);
        mascotasporEspecieLayout.setHorizontalGroup(
            mascotasporEspecieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 546, Short.MAX_VALUE)
        );
        mascotasporEspecieLayout.setVerticalGroup(
            mascotasporEspecieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 309, Short.MAX_VALUE)
        );

        mascota.addTab("Mascotas por Especie", mascotasporEspecie);

        listaMascotas.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listaMascotas);

        exportarMascotas.setText("Exportar");
        exportarMascotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportarMascotasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout reporteMascotasLayout = new javax.swing.GroupLayout(reporteMascotas);
        reporteMascotas.setLayout(reporteMascotasLayout);
        reporteMascotasLayout.setHorizontalGroup(
            reporteMascotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reporteMascotasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reporteMascotasLayout.createSequentialGroup()
                .addContainerGap(240, Short.MAX_VALUE)
                .addComponent(exportarMascotas)
                .addGap(232, 232, 232))
        );
        reporteMascotasLayout.setVerticalGroup(
            reporteMascotasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reporteMascotasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exportarMascotas)
                .addContainerGap())
        );

        mascota.addTab("Reporte Mascotas", reporteMascotas);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mascota))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mascota, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TelefonoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TelefonoClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TelefonoClienteActionPerformed

    private void refrescarGraficaMascotaporEspecie() {
        LinkedList<MascotasporEspecie> reporte = CtMascota.buscarEspecieMascotas();
        DefaultPieDataset dataset = new DefaultPieDataset();
        for (MascotasporEspecie registro : reporte) {
            dataset.setValue(registro.getEspecie(), registro.getCantidadMascotasporEspecie());
        }
        JFreeChart chart = ChartFactory.createPieChart("Mascotas por Especie", dataset, true, true, true);
        ChartPanel panel = new ChartPanel(chart);
        panel.setMouseWheelEnabled(true);
        mascotasporEspecie.setLayout(new java.awt.BorderLayout());
        mascotasporEspecie.add(panel, BorderLayout.CENTER);
        mascotasporEspecie.validate();

    }
    private void btnCrearPlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearPlanActionPerformed
        // TODO add your handling code here:
        String codigo = codigoPlan.getText();
        String nombre = nombrePlan.getSelectedItem().toString();
        int precio = Integer.parseInt(precioPlan.getText());
        Plan p = new Plan(codigo, nombre, precio);

        if (this.CtPlan.crearPlan(p)) {
            JOptionPane.showMessageDialog(this, "El plan fue agregado en la base de datos");
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo agregar el registro a la base de datos");
        }
        limpiarPlan();


    }//GEN-LAST:event_btnCrearPlanActionPerformed

    private void btnConsultarPlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarPlanActionPerformed
        // TODO add your handling code here:
        String codigo = codigoPlan.getText();
        Plan p = CtPlan.buscarPlan(codigo);
        if (p == null) {
            JOptionPane.showMessageDialog(this, "El código de ese plan no fue encontrado");
            limpiarPlan();
        } else {
            if (p.getNombre().equals("Bienestar")) {
                nombrePlan.setSelectedIndex(0);
            } else {
                if (p.getNombre().equals("Élite")) {
                    nombrePlan.setSelectedIndex(1);
                } else {
                    nombrePlan.setSelectedIndex(2);
                }
            }
            precioPlan.setText(String.valueOf(p.getPrecio()));
        }
    }//GEN-LAST:event_btnConsultarPlanActionPerformed

    private void btnModificarPlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarPlanActionPerformed
        // TODO add your handling code here:
        String codigo = codigoPlan.getText();
        String nombre = nombrePlan.getSelectedItem().toString();
        int precio = Integer.parseInt(precioPlan.getText());
        Plan p = new Plan(codigo, nombre, precio);
        try {
            boolean respuesta = CtPlan.actualizarPlan(p);
            if (respuesta) {
                JOptionPane.showMessageDialog(this, "Registro actualizado correctamente");
            } else {
                JOptionPane.showMessageDialog(this, "Registro no actualizado");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Debe buscar el registro para actualizar");
        }
        limpiarPlan();

    }//GEN-LAST:event_btnModificarPlanActionPerformed

    private void btnLimpiarPlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarPlanActionPerformed
        // TODO add your handling code here:
        limpiarPlan();
    }//GEN-LAST:event_btnLimpiarPlanActionPerformed

    private void btnBorrarPlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarPlanActionPerformed
        // TODO add your handling code here:
        String codigo = codigoPlan.getText();
        String nombre = nombrePlan.getSelectedItem().toString();
        int precio = Integer.parseInt(precioPlan.getText());
        Plan p = new Plan(codigo, nombre, precio);
        try {
            boolean respuesta = CtPlan.borrarPlan(p);
            if (respuesta) {
                JOptionPane.showMessageDialog(this, "Registro borrado correctamente");
            } else {
                JOptionPane.showMessageDialog(this, "Registro no borrado");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No se pudo borrar");
        }
        limpiarPlan();

    }//GEN-LAST:event_btnBorrarPlanActionPerformed

    private void btnCrearClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearClienteActionPerformed
        // TODO add your handling code here:
        String identificacion = IdentificacionCliente.getText();
        String nombres = NombresCliente.getText();
        String apellidos = ApellidosCliente.getText();
        String direccion = DireccionCliente.getText();
        String telefono = TelefonoCliente.getText();
        Cliente c = new Cliente(identificacion, nombres, apellidos, direccion, telefono);

        if (this.CtCliente.crearCliente(c)) {
            JOptionPane.showMessageDialog(this, "El cliente fue agregado a la base de datos");
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo agregar el cliente a la base de datos");
        }
        limpiarClientes();
        recargarComboBoxCliente();

    }//GEN-LAST:event_btnCrearClienteActionPerformed

    private void btnCrearMascotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearMascotaActionPerformed
        String codigo = codigoMascota.getText();
        String nombre = nombreMascota.getText();
        int annioNac = Integer.parseInt(annioNacMascota.getText());
        int peso = Integer.parseInt(pesoMascota.getText());
        String especie = especieMascota.getSelectedItem().toString();
        String clienteSeleccionado = cbCliente.getSelectedItem().toString();
        int primerEspacio = clienteSeleccionado.indexOf(" ");
        int idFkCliente = Integer.parseInt(clienteSeleccionado.substring(0, primerEspacio));
        Mascota m = new Mascota(codigo, nombre, annioNac, peso, especie, idFkCliente);

        if (this.CtMascota.crearMascota(m)) {
            JOptionPane.showMessageDialog(this, "La mascota fue agregada a la base de datos");
            llenarListaMascotas();

        } else {
            JOptionPane.showMessageDialog(this, "No se pudo agregar la mascota a la base de datos");
        }
        limpiarMascota();
    }//GEN-LAST:event_btnCrearMascotaActionPerformed


    private void btnCrearPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearPagoActionPerformed
        // TODO add your handling code here:
        String fechaPag = fechaPago.getText();
        int numCuotas = Integer.parseInt(numeroCuotas.getText());
        String mascotaSeleccionada = pagoMascota.getSelectedItem().toString();
        int primerEspacio = mascotaSeleccionada.indexOf(" ");
        int idFkMascota = Integer.parseInt(mascotaSeleccionada.substring(0, primerEspacio));
        String planSeleccionado = pagoPlan.getSelectedItem().toString();
        primerEspacio = planSeleccionado.indexOf(" ");
        int idFKPlan = Integer.parseInt(planSeleccionado.substring(0, primerEspacio));
        Pago p = new Pago(fechaPag, numCuotas, idFkMascota, idFKPlan);

        if (this.CtPago.crearPago(p)) {
            JOptionPane.showMessageDialog(this, "El pago fue agregado a la base de datos");
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo agregar el pago a la base de datos");
        }
        limpiarPago();
    }//GEN-LAST:event_btnCrearPagoActionPerformed

    private void pagoMascotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pagoMascotaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pagoMascotaActionPerformed

    private void nombreMascotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreMascotaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreMascotaActionPerformed

    private void cbClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbClienteActionPerformed

    private void btnConsultarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarClienteActionPerformed
        // TODO add your handling code here:
        String identificacion = IdentificacionCliente.getText();
        Cliente c = CtCliente.buscarCliente(identificacion);
        if (c == null) {
            JOptionPane.showMessageDialog(this, "El código de ese cliente no fue encontrado");
            limpiarClientes();
        } else {
            IdentificacionCliente.setText(String.valueOf(c.getidentificacion()));
            NombresCliente.setText(c.getNombres());
            ApellidosCliente.setText(c.getApellidos());
            DireccionCliente.setText(c.getDireccion());
            TelefonoCliente.setText(c.getTelefono());
        }
    }//GEN-LAST:event_btnConsultarClienteActionPerformed

    private void btnModificarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarClienteActionPerformed
        // TODO add your handling code here:
        String ident = IdentificacionCliente.getText();
        String nom = NombresCliente.getText();
        String apell = ApellidosCliente.getText();
        String dir = DireccionCliente.getText();
        String tel = TelefonoCliente.getText();
        Cliente c = new Cliente(ident, nom, apell, dir, tel);
        try {
            boolean respuesta = CtCliente.actualizarCliente(c);
            if (respuesta) {
                JOptionPane.showMessageDialog(this, "Registro actualizado correctamente");
            } else {
                JOptionPane.showMessageDialog(this, "Registro no actualizado");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Debe buscar el registro para actualizar");
        }
        limpiarClientes();
        recargarComboBoxCliente();
    }//GEN-LAST:event_btnModificarClienteActionPerformed

    private void btnBorrarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarClienteActionPerformed
        // TODO add your handling code here:
        String ident = IdentificacionCliente.getText();
        String nom = NombresCliente.getText();
        String apell = ApellidosCliente.getText();
        String dir = DireccionCliente.getText();
        String tel = TelefonoCliente.getText();
        Cliente c = new Cliente(ident, nom, apell, dir, tel);
        try {
            boolean respuesta = CtCliente.borrarCliente(c);
            if (respuesta) {
                JOptionPane.showMessageDialog(this, "Cliente borrado correctamente");
            } else {
                JOptionPane.showMessageDialog(this, "Cliente no borrado");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No se pudo borrar");
        }
        limpiarClientes();
        recargarComboBoxCliente();
    }//GEN-LAST:event_btnBorrarClienteActionPerformed

    private void btnLimpiarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarClienteActionPerformed
        // TODO add your handling code here:
        limpiarClientes();
    }//GEN-LAST:event_btnLimpiarClienteActionPerformed
    private void btnConsultarMascotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarMascotaActionPerformed
        // TODO add your handling code here:
        String codigo = codigoMascota.getText();
        Mascota m = CtMascota.buscarMascota(codigo);
        if (m == null) {
            JOptionPane.showMessageDialog(this, "Mascota no encontrada");
            limpiarMascota();
        } else {
            nombreMascota.setText(m.getNombre());
            annioNacMascota.setText(String.valueOf(m.getAnnioNac()));
            pesoMascota.setText(String.valueOf(m.getPeso()));
            String specie =  m.getEspecie();
            switch(specie){
                case "Canino": especieMascota.setSelectedIndex(0);
                               break;
                case "Felino": especieMascota.setSelectedIndex(1);
                               break;
                case "Reptil": especieMascota.setSelectedIndex(2);
                               break;
                case "Ave":    especieMascota.setSelectedIndex(3);
                               break;               
                case "Pez":    especieMascota.setSelectedIndex(4);
                               break;               
            }
            
                
            
            int indice = 0;

            for (Cliente cl : clienteComboBox) {
                if (cl.getIdPk() == m.getIdCliente()) {
                    cbCliente.setSelectedIndex(indice);
                }
                indice++;
            }
        }
    }//GEN-LAST:event_btnConsultarMascotaActionPerformed

    private void btnLimpiarMascotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarMascotaActionPerformed
        // TODO add your handling code here:
        limpiarMascota();
    }//GEN-LAST:event_btnLimpiarMascotaActionPerformed

    private void btnModificarMascotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarMascotaActionPerformed
        // TODO add your handling code here:
        String codigo = codigoMascota.getText();
        String nombre = nombreMascota.getText();
        int annio = Integer.parseInt(annioNacMascota.getText());
        int peso = Integer.parseInt(pesoMascota.getText());
        String especie = especieMascota.getSelectedItem().toString();
        String clienteSeleccionado = cbCliente.getSelectedItem().toString();
        int primerEspacio = clienteSeleccionado.indexOf(" ");
        int idFkCliente = Integer.parseInt(clienteSeleccionado.substring(0, primerEspacio));
        Mascota m = new Mascota(codigo, nombre, annio, peso, especie, idFkCliente);

        try {
            boolean respuesta = CtMascota.actualizarMascota(m);
            if (respuesta) {
                JOptionPane.showMessageDialog(this, "Registro actualizado correctamente");
                limpiarMascota();
                llenarListaMascotas();
            } else {
                JOptionPane.showMessageDialog(this, "Registro no actualizado");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Debe buscar el registro para actualizar");
        }
    }//GEN-LAST:event_btnModificarMascotaActionPerformed


    private void btnBorrarMascotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarMascotaActionPerformed
        // TODO add your handling code here:
        String codigo = codigoMascota.getText();
        String nombre = nombreMascota.getText();
        int annio = Integer.parseInt(annioNacMascota.getText());
        int peso = Integer.parseInt(pesoMascota.getText());
        String especie = especieMascota.getSelectedItem().toString();
        String clienteSeleccionado = cbCliente.getSelectedItem().toString();
        int primerEspacio = clienteSeleccionado.indexOf(" ");
        int idFkCliente = Integer.parseInt(clienteSeleccionado.substring(0, primerEspacio));
        Mascota m = new Mascota(codigo, nombre, annio, peso, especie, idFkCliente);

        try {
            boolean respuesta = CtMascota.borrarMascota(m);
            if (respuesta) {
                JOptionPane.showMessageDialog(this, "Cliente borrado correctamente");
                llenarListaMascotas();
            } else {
                JOptionPane.showMessageDialog(this, "Cliente no borrado");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No se pudo borrar");
        }
        limpiarMascota();
        recargarComboBoxCliente();
    }//GEN-LAST:event_btnBorrarMascotaActionPerformed

    private void btnConsultarPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarPagoActionPerformed
        // TODO add your handling code here:
        String id = idPago.getText();
        Pago p = CtPago.buscarPago(id);
        if (p == null) {
            JOptionPane.showMessageDialog(this, "Pago no encontrado");
            limpiarMascota();
        } else {
            fechaPago.setText(p.getFechaPago());
            numeroCuotas.setText(String.valueOf(p.getNumeroCuotas()));

            int indice = 0;

            for (Mascota m : mascotaComboBox) {
                if (m.getIdPk() == p.getIdMascota()) {
                    pagoMascota.setSelectedIndex(indice);
                }
                indice++;
            }
            indice = 0;
            for (Plan pl : planComboBox) {
                if (pl.getIdPk() == p.getIdPlan()) {
                    pagoPlan.setSelectedIndex(indice);
                }
                indice++;
            }
        }

    }//GEN-LAST:event_btnConsultarPagoActionPerformed

    private void btnLimpiarPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarPagoActionPerformed
        // TODO add your handling code here:
        limpiarPago();
    }//GEN-LAST:event_btnLimpiarPagoActionPerformed

    private void btnModificarPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarPagoActionPerformed
        // TODO add your handling code here:
        String fecha = fechaPago.getText();
        int numCuotas = Integer.parseInt(numeroCuotas.getText());

        String mascotaSeleccionada = pagoMascota.getSelectedItem().toString();
        int primerEspacio = mascotaSeleccionada.indexOf(" ");
        int idFkMascota = Integer.parseInt(mascotaSeleccionada.substring(0, primerEspacio));
        String planSeleccionado = pagoPlan.getSelectedItem().toString();
        primerEspacio = planSeleccionado.indexOf(" ");
        int idFkPlan = Integer.parseInt(planSeleccionado.substring(0, primerEspacio));

        Pago p = new Pago(fecha, numCuotas, idFkMascota, idFkPlan);
        p.setIdPk(Integer.parseInt(idPago.getText()));

        try {
            boolean respuesta = CtPago.actualizarPago(p);
            if (respuesta) {
                JOptionPane.showMessageDialog(this, "Registro actualizado correctamente");
                limpiarPago();
            } else {
                JOptionPane.showMessageDialog(this, "Registro no actualizado");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Debe buscar el registro para actualizar");
        }
    }//GEN-LAST:event_btnModificarPagoActionPerformed

    private void btnBorrarPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarPagoActionPerformed
        // TODO add your handling code here:
        int idPk = Integer.parseInt(idPago.getText());
        String fechaPag = fechaPago.getText();
        int numCuotas = Integer.parseInt(numeroCuotas.getText());
        String mascotaSeleccionada = pagoMascota.getSelectedItem().toString();
        int primerEspacio = mascotaSeleccionada.indexOf(" ");
        int idFkMascota = Integer.parseInt(mascotaSeleccionada.substring(0, primerEspacio));
        String planSeleccionado = pagoPlan.getSelectedItem().toString();
        primerEspacio = planSeleccionado.indexOf(" ");
        int idFKPlan = Integer.parseInt(planSeleccionado.substring(0, primerEspacio));
        Pago p = new Pago(fechaPag, numCuotas, idFkMascota, idFKPlan);
        p.setIdPk(idPk);

        try {
            boolean respuesta = CtPago.borrarPago(p);
            if (respuesta) {
                JOptionPane.showMessageDialog(this, "Pago borrado correctamente");
            } else {
                JOptionPane.showMessageDialog(this, "Pago no borrado");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No se pudo borrar");
        }
        limpiarMascota();
        recargarComboBoxCliente();
    }//GEN-LAST:event_btnBorrarPagoActionPerformed

    private void exportarMascotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportarMascotasActionPerformed
        // TODO add your handling code here:
        HSSFWorkbook book = new HSSFWorkbook();
        HSSFSheet sheet = book.createSheet();
        book.setSheetName(0, "Mascotas");
        String[] encabezados = new String[]{
            "Codigo",
            "Nombre",
            "Año Nac",
            "Peso",
            "Especie",};
        CellStyle estiloEncabezados = book.createCellStyle();
        HSSFFont font = book.createFont();
        font.setBold(true);
        estiloEncabezados.setFont(font);

        HSSFRow encabezadosFila = sheet.createRow(0);
        for (int i = 0; i < encabezados.length; i++) {
            String encabezado = encabezados[i];
            HSSFCell cell = encabezadosFila.createCell(i);
            cell.setCellStyle(estiloEncabezados);
            cell.setCellValue(encabezado);
        }
        for (int i = 0; i < mascotaComboBox.size(); i++) {

            HSSFRow fila = sheet.createRow(i + 1);
            String codigo = mascotaComboBox.get(i).getCodigo();
            String nombre = mascotaComboBox.get(i).getNombre();
            int annio = mascotaComboBox.get(i).getAnnioNac();
            int peso = mascotaComboBox.get(i).getPeso();
            String especie = mascotaComboBox.get(i).getEspecie();

            fila.createCell(0).setCellValue(codigo);
            fila.createCell(1).setCellValue(nombre);
            fila.createCell(2).setCellValue(annio);
            fila.createCell(3).setCellValue(peso);
            fila.createCell(4).setCellValue(especie);
        }
        try {
            FileOutputStream archivo = new FileOutputStream("Lista Mascotas.xls");
            book.write(archivo);
            archivo.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exportarMascotasActionPerformed

    private void limpiarClientes() {
        IdentificacionCliente.setText("");
        NombresCliente.setText("");
        ApellidosCliente.setText("");
        DireccionCliente.setText("");
        TelefonoCliente.setText("");
    }

    private void limpiarPlan() {
        codigoPlan.setText("");
        nombrePlan.setSelectedIndex(0);
        precioPlan.setText("");
    }

    private void limpiarMascota() {
        codigoMascota.setText("");
        nombreMascota.setText("");
        annioNacMascota.setText("");
        pesoMascota.setText("");
        especieMascota.setSelectedIndex(0);
        cbCliente.setSelectedIndex(0);
    }

    private void limpiarPago() {
        idPago.setText("");
        fechaPago.setText("");
        numeroCuotas.setText("");
        pagoMascota.setSelectedIndex(0);
        pagoPlan.setSelectedIndex(0);
    }

    private void recargarComboBoxCliente() {
        cbCliente.removeAllItems();
        this.clienteComboBox = CtCliente.listarTodosClientes();
        int contador = 0;
        while (contador < clienteComboBox.size()) {
            String tempNombre;
            tempNombre = clienteComboBox.get(contador).getIdPk() + " " + clienteComboBox.get(contador).getidentificacion() + " " + clienteComboBox.get(contador).getNombres() + " " + clienteComboBox.get(contador).getApellidos();

            cbCliente.addItem(tempNombre);
            contador = contador + 1;
        }
    }

    private void recargarComboBoxMascota() {
        pagoMascota.removeAllItems();
        this.mascotaComboBox = CtMascota.listarTodosMascotas();
        int contador = 0;
        while (contador < mascotaComboBox.size()) {
            String tempNombre;
            tempNombre = mascotaComboBox.get(contador).getIdPk() + " " + mascotaComboBox.get(contador).getNombre();

            pagoMascota.addItem(tempNombre);
            contador++;
        }
    }

    private void recargarComboBoxPlan() {
        pagoPlan.removeAllItems();
        this.planComboBox = CtPlan.listarTodosPlan();
        int contador = 0;
        while (contador < planComboBox.size()) {
            String tempNombre;
            tempNombre = planComboBox.get(contador).getIdPk() + " " + planComboBox.get(contador).getNombre();

            pagoPlan.addItem(tempNombre);
            contador++;
        }
    }

    private void llenarListaMascotas() {
        listaMascotas.removeAll();
        DefaultListModel model = new DefaultListModel();
        int index = 0;
        for (Mascota m : mascotaComboBox) {
            String data = m.getCodigo() + " - " + m.getNombre() + " - " + m.getAnnioNac() + " - " + m.getPeso() + " - " + m.getEspecie();
            model.add(index, data);
            index++;
        }
        listaMascotas.setModel(model);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Vista().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ApellidosCliente;
    private javax.swing.JTextField DireccionCliente;
    private javax.swing.JTextField IdentificacionCliente;
    private javax.swing.JTextField NombresCliente;
    private javax.swing.JTextField TelefonoCliente;
    private javax.swing.JTextField annioNacMascota;
    private javax.swing.JButton btnBorrarCliente;
    private javax.swing.JButton btnBorrarMascota;
    private javax.swing.JButton btnBorrarPago;
    private javax.swing.JButton btnBorrarPlan;
    private javax.swing.JButton btnConsultarCliente;
    private javax.swing.JButton btnConsultarMascota;
    private javax.swing.JButton btnConsultarPago;
    private javax.swing.JButton btnConsultarPlan;
    private javax.swing.JButton btnCrearCliente;
    private javax.swing.JButton btnCrearMascota;
    private javax.swing.JButton btnCrearPago;
    private javax.swing.JButton btnCrearPlan;
    private javax.swing.JButton btnLimpiarCliente;
    private javax.swing.JButton btnLimpiarMascota;
    private javax.swing.JButton btnLimpiarPago;
    private javax.swing.JButton btnLimpiarPlan;
    private javax.swing.JButton btnModificarCliente;
    private javax.swing.JButton btnModificarMascota;
    private javax.swing.JButton btnModificarPago;
    private javax.swing.JButton btnModificarPlan;
    private javax.swing.JComboBox<String> cbCliente;
    private javax.swing.JTextField codigoMascota;
    private javax.swing.JTextField codigoPlan;
    private javax.swing.JComboBox<String> especieMascota;
    private javax.swing.JButton exportarMascotas;
    private javax.swing.JTextField fechaPago;
    private javax.swing.JTextField idPago;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanelCliente;
    private javax.swing.JPanel jPanelMascota;
    private javax.swing.JPanel jPanelPago;
    private javax.swing.JPanel jPanelPlan;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listaMascotas;
    private javax.swing.JTabbedPane mascota;
    private javax.swing.JPanel mascotasporEspecie;
    private javax.swing.JTextField nombreMascota;
    private javax.swing.JComboBox<String> nombrePlan;
    private javax.swing.JTextField numeroCuotas;
    private javax.swing.JComboBox<String> pagoMascota;
    private javax.swing.JComboBox<String> pagoPlan;
    private javax.swing.JTextField pesoMascota;
    private javax.swing.JTextField precioPlan;
    private javax.swing.JPanel reporteMascotas;
    // End of variables declaration//GEN-END:variables

}
